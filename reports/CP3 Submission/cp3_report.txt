Design:
The implementation of the advanced designs was divided evenly among three team members. Simon took on the task of designing and implementing a local branch predictor and a two-level branch predictor, Youyou was responsible for designing and implementing the M-extension of RISCV that consists of an advanced Dadda multiplier and a common devider, and Yulun, also known as Ben, was in charge of integrating the parameterized 1-cycle hit Cache and a victim cache. We convened as a group to collaboratively work on debugging and integration of all components together.

Functionalities:
We implemented a local branch predictor and global branch predictor along with a branch history table. The Dadda Multiplier performs the multiplication in 8 reduction stages such that for each stage, additions are done in parallel. The latency can be significantly reduced and performace is better than a traditional add-shift multiplier. Most of the multiplier module is generated by a python script. We also integrate the 1-cycle hit cache using SRAM to reduce the area and implemented a victim cache to reduce cache misses.

Verification:
To verify our design, we employed assembly codes and examined the signal waveforms in Verdi. Initially, we conducted dut unit test on each individual module to make sure it works perfectly. 

Timing and energy analysis:
the timing and energy analysis of your design: fmax = 2500 ps & total power = 1.27e+04 
